{"version":3,"sources":["containers/Quiz/Quiz.css","components/ActiveQuiz/ActiveQuiz.css","components/ActiveQuiz/AnswersList/AnswerItem/AnswerItem.css","components/FinishedQuiz/FinishedQuiz.css","components/UI/Button/Button.css","hoc/Layout/Layout.css","components/ActiveQuiz/AnswersList/AnswersList.css","hoc/Layout/Layout.js","components/ActiveQuiz/AnswersList/AnswerItem/AnswerItem.js","components/ActiveQuiz/AnswersList/AnswersList.js","components/ActiveQuiz/ActiveQuiz.js","components/UI/Button/Button.js","components/FinishedQuiz/FinishedQuiz.js","containers/Quiz/Quiz.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Quiz","QuizWrapper","ActiveQuiz","Question","AnswerItem","success","error","FinishedQuiz","Button","primary","Layout","AnswersList","react_default","a","createElement","className","classes","this","props","children","Component","cls","state","push","join","onClick","onAnswerClick","answer","id","text","answers","map","index","AnswersList_AnswerItem_AnswerItem","key","answerNumber","question","quizLength","ActiveQuiz_AnswersList_AnswersList","type","disabled","successCount","Object","keys","results","reduce","total","quiz","quizItem","length","UI_Button_Button","onRetry","isFinished","activeQuestion","answerState","rightAnswerId","onAnswerClickHandler","answerId","_this","setState","defineProperty","timeout","window","setTimeout","isQuizFinished","clearTimeout","retryHandler","components_FinishedQuiz_FinishedQuiz","components_ActiveQuiz_ActiveQuiz","App","hoc_Layout_Layout","containers_Quiz_Quiz","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e7b2fe7e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Quiz\":\"_1YgKh5-2vFDb7_6hPbmsB6\",\"QuizWrapper\":\"_3xC_eHiHj9I7ixbcYFVuSc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ActiveQuiz\":\"_2aF-ETEz5Uw_hwqgH1nMHd\",\"Question\":\"_1DBQpbIA4b48_krnabND3W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AnswerItem\":\"_2E3aRuOAvALxwJ64TjxD0e\",\"success\":\"_1LWwOWzK3fQBuVjeIfgivh\",\"error\":\"_33P5DZUx4PqLBjnNHwOgLk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FinishedQuiz\":\"_2KeHujPDq83i5WeRsI-CsL\",\"success\":\"_2INriMCEx0o_5ZL28MiGYF\",\"error\":\"_3HVNljcTWH-L_e_6V-v5eG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"ajevik7blFiPpl8rqHzrE\",\"error\":\"_3i2F2hSYmJr-6SKPFJe8Aw\",\"success\":\"_1wqIAlCYQsq9KAocDus16O\",\"primary\":\"_2Limk5MVXprVj6A3ZNryrL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"_1WKx0cW0EyKqC1Mv7BZVSL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AnswersList\":\"_8k9Jp5qAqNPReHxCWQVa0\"};","import React, { Component } from 'react';\r\nimport classes from './Layout.css';\r\n\r\nclass Layout extends Component {\r\n  render() {\r\n    return (\r\n      <div className={classes.Layout}>\r\n        <main>\r\n          { this.props.children }\r\n        </main>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Layout;","import React from 'react';\r\nimport classes from './AnswerItem.css';\r\n\r\nconst AnswerItem = props => {\r\n\r\n  const cls = [classes.AnswerItem];\r\n\r\n  if(props.state) {\r\n    cls.push(classes[props.state])\r\n  }\r\n\r\n  return (\r\n    <li \r\n      className={cls.join(' ')}\r\n      onClick={() => props.onAnswerClick(props.answer.id)}\r\n    >\r\n      {props.answer.text}\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default AnswerItem;","import React from 'react';\r\nimport classes from './AnswersList.css';\r\nimport AnswerItem from './AnswerItem/AnswerItem';\r\n\r\nconst AnswersList = props => (\r\n  <ul className={classes.AnswersList}>\r\n    {props.answers.map((answer, index) => {\r\n      return (\r\n        <AnswerItem\r\n          key={index}\r\n          answer={answer}\r\n          onAnswerClick={props.onAnswerClick}\r\n          state={props.state ? props.state[answer.id] : null}\r\n        />\r\n      )\r\n    }) }\r\n  </ul>\r\n)\r\n\r\nexport default AnswersList;","import React from 'react';\r\nimport classes from './ActiveQuiz.css';\r\nimport AnswersList from './AnswersList/AnswersList';\r\n\r\nconst ActiveQuiz = props => (\r\n  <div className={classes.ActiveQuiz}>\r\n    <p className={classes.Question}>\r\n      <span>\r\n        <strong>{props.answerNumber}.</strong>&nbsp;\r\n        {props.question}\r\n      </span>\r\n\r\n      <small>{props.answerNumber} из {props.quizLength}</small>\r\n    </p>\r\n\r\n    <AnswersList\r\n      state={props.state}\r\n      answers={props.answers}\r\n      onAnswerClick={props.onAnswerClick}\r\n    />\r\n  </div>\r\n)\r\n\r\nexport default ActiveQuiz","import React from 'react';\r\nimport classes from './Button.css';\r\n\r\nconst Button = props => {\r\n\r\n  const cls = [\r\n    classes.Button,\r\n    classes[props.type]\r\n  ]\r\n\r\n  return (\r\n    <button\r\n      onClick={props.onClick}\r\n      className={cls.join(' ')}\r\n      disabled={props.disabled}\r\n    >\r\n      {props.children}\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport classes from './FinishedQuiz.css';\r\nimport Button from '../UI/Button/Button';\r\n\r\nconst FinishedQuiz = props => {\r\n  \r\n  const successCount = Object.keys(props.results).reduce((total, key) => {\r\n    if (props.results[key] === 'success') {\r\n      total++;\r\n    }\r\n\r\n    return total;\r\n  }, 0)\r\n\r\n  return (\r\n    <div className={classes.FinishedQuiz}>\r\n      <ul>\r\n        { props.quiz.map((quizItem, index) => {\r\n\r\n        const cls = [\r\n          'fa', \r\n          props.results[quizItem.id] === 'error' ? 'fa-times' : 'fa-check',\r\n          classes[props.results[quizItem.id]]\r\n          ];\r\n\r\n          return (\r\n            <li key={index}>\r\n              <strong>{index + 1}</strong>.&nbsp;\r\n              {quizItem.question}\r\n              <i className={cls.join(' ')} />\r\n            </li>\r\n          )\r\n\r\n        }) }\r\n      </ul>\r\n\r\n      <p>Правильно {successCount} из {props.quiz.length}</p>\r\n\r\n      <div>\r\n        <Button onClick={props.onRetry} type='primary'>Повторить</Button>\r\n        <Button type='success'>Перейти в список тестов</Button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FinishedQuiz;","import React, { Component } from 'react';\r\nimport classes from './Quiz.css';\r\nimport ActiveQuiz from '../../components/ActiveQuiz/ActiveQuiz';\r\nimport FinishedQuiz from '../../components/FinishedQuiz/FinishedQuiz'\r\n\r\n\r\nclass Quiz extends Component {\r\n\r\n  state = {\r\n    results: {},\r\n    isFinished: false,\r\n    activeQuestion: 0,\r\n    answerState: null,\r\n    quiz: [\r\n      {\r\n        question: 'Какого цвета небо?',\r\n        rightAnswerId: 2,\r\n        id: 1,\r\n        answers: [\r\n          {text: 'Черный', id: 1},\r\n          {text: 'Синий', id: 2},\r\n          {text: 'Красный', id: 3},\r\n          {text: 'Зелёный', id: 4}\r\n        ]\r\n      },\r\n      {\r\n        question: 'В каком году был основан Санкт-Петербург?',\r\n        rightAnswerId: 3,\r\n        id: 2,\r\n        answers: [\r\n          {text: '1700', id: 1},\r\n          {text: '1706', id: 2},\r\n          {text: '1703', id: 3},\r\n          {text: '1701', id: 4}\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n\r\n  onAnswerClickHandler = answerId => {\r\n\r\n    if (this.state.answerState) {\r\n      const key = Object.keys(this.state.answerState)[0];\r\n      if (this.state.answerState[key] === 'success') {\r\n        return \r\n      }\r\n    }\r\n\r\n    const question = this.state.quiz[this.state.activeQuestion];\r\n    const { results } = this.state;\r\n\r\n    if (question.rightAnswerId === answerId) {\r\n\r\n      if (!results[question.id]) {\r\n        results[question.id] = 'success';\r\n      }\r\n\r\n      this.setState({\r\n        answerState: {[answerId]: 'success'},\r\n        results\r\n      });\r\n\r\n      const timeout = window.setTimeout(() => {\r\n        if (this.isQuizFinished()) {\r\n          this.setState({\r\n            isFinished: true\r\n          })\r\n        } else {\r\n          this.setState({\r\n            activeQuestion: this.state.activeQuestion + 1,\r\n            answerState: null\r\n          })\r\n        }\r\n\r\n        window.clearTimeout(timeout);\r\n      }, 1000);\r\n    } else {\r\n      results[question.id] = 'error';\r\n      this.setState({\r\n        answerState: {[answerId]: 'error'},\r\n        results\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  isQuizFinished() {\r\n    return this.state.activeQuestion + 1 === this.state.quiz.length;\r\n  }\r\n\r\n  retryHandler = () => {\r\n    this.setState({\r\n      activeQuestion: 0,\r\n      answerState: null,\r\n      isFinished: false,\r\n      results: {}\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={classes.Quiz}>\r\n        <div className={classes.QuizWrapper}>\r\n          <h1>Ответьте на все вопросы</h1>\r\n\r\n          {\r\n            this.state.isFinished \r\n              ? <FinishedQuiz\r\n                  results={this.state.results}\r\n                  quiz={this.state.quiz}\r\n                  onRetry={this.retryHandler}\r\n                />\r\n              : <ActiveQuiz\r\n                  answers={this.state.quiz[this.state.activeQuestion].answers}\r\n                  question={this.state.quiz[this.state.activeQuestion].question}\r\n                  onAnswerClick={this.onAnswerClickHandler}\r\n                  quizLength={this.state.quiz.length}\r\n                  answerNumber={this.state.activeQuestion + 1}\r\n                  state={this.state.answerState}\r\n                />\r\n          }\r\n\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Quiz;","import React, { Component } from 'react';\nimport Layout from './hoc/Layout/Layout';\nimport Quiz from './containers/Quiz/Quiz';\n\nclass App extends Component {\n  render() {\n    return (\n      <Layout>\n        <Quiz/>\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}